#!/bin/bash
# This should do everything required to build & install under Ubuntu and update itself.
# Other distros edit config file when prompted to change Linux= to command to get your dependencies.
# Dependencies for many distros are listed on the github FAQ.  Please let me know if incorrect
# or if you have another distro to add.
# 2020-0728-1402

domake(){ 
	if [ "$TARGET_WEB" = 1 ]; then 
		loademsdk
		if "$InstallHD" = 1; then
			sed -i 's/TOTAL_MEMORY=20MB/TOTAL_MEMORY=25MB/g' ~/"$REPO"/Makefile
		fi
	fi
	if [ "$REPO" = "sm64nx" ]; then
		sed -i 's/-no-pie -lpthread -lzstd/-no-pie -lpthread -lzstd -lstdc++fs/g' ~/"$REPO"/Makefile
	fi
	cd ~/"$REPO"
	if [ "$REPO" = "sm64-port" ] || [ "$REPO" = "sm64nx" ]; then
		time make VERSION=$VERSION TARGET_WEB=$TARGET_WEB "$JOBS"	
	elif [ "$REPO" = "sm64pc" ] || [ "$REPO" = "sm64ex" ]; then
		time make BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES "$JOBS"
	else
		echo "$REPO" is not a known repository.  Check your REPO setting and try again.
		echo Known repos are sm64-port, sm64nx, sm64pc, and sm64ex.
		echo Script exiting incomplete.
		exit
	fi
	if [ "$REPO" = "sm64nx" ] || ( [ "$TARGET_WEB" = 1 ] && [ "$InstallHD" = 1 ] ); then
		rm Makefile
		git checkout Makefile
	fi
	}

gcccheck(){
	if gcc --version | awk '/gcc/ && ($3+0)>8'; then
		echo gcc 8 confirmed
	else
		sudo apt install -y g++-8
		sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8
		if gcc --version | awk '/gcc/ && ($3+0)>8'; then
			echo gcc 8 installed
		else 
			echo WARNING: Your C compiler is not new enough for sm64nx. 
			echo gcc --version must report 8 or higher.  
			echo Please install it then rerun smlinux, or use another repo.
			echo
			exit
	fi	fi
	}


makeconfig(){
echo '#[sm64pc/sm64ex] These settings only apply to sm64pc/sm64ex fork.
BETTERCAMERA=1
NODRAWINGDISTANCE=1
TEXTURE_FIX=1
EXTERNAL_DATA=1
DISCORDRPC=1
#RENDER_API supports GL (2.1+) or GL_LEGACY (1.2-2.0)
RENDER_API=GL
TEXTSAVES=0
#[Script] These settings tell script what to do.
#VERSION supports us jp eu (must correspond to rom version)
VERSION=us
#REPO supports sm64pc sm64-port sm64ex sm64nx 
REPO=sm64ex
Branch=master
AutoUpdate=1
InstallHD=1
UpdateHD=0
TARGET_WEB=0
JOBS=-j
Linux="sudo apt install -y build-essential git python3 libaudiofile-dev libglew-dev libsdl2-dev binutils libusb-1.0-0-dev libzstd-dev"'> ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinuxcfg.txt
	}

loadconfig(){
	REPO=sm64pc
	TARGET_WEB=0
	TEXTSAVES=0
	source ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinuxcfg.txt
	if [ "$REPO" = "sm64pc" ] && [ "$Branch" = "nightly" ]; then
		REPO=sm64ex
	fi
	if [ "$JOBS" = "-j" ]; then
		if [ "$REPO" = "sm64nx" ]; then 
			JOBS=-j`nproc`
			if [ ! -f ~/.smlinuxUpdate ]; then
				echo WARNING: Jobs set to -j`nproc` because nuz nx has problems with unlimited.
			fi
		elif [ "$TARGET_WEB" = "1" ]; then
			JOBS=-j1
			if [ ! -f ~/.smlinuxUpdate ]; then
				echo WARNING: Unlimited jobs removed cuz emsdk cache doesnt behave well. 
			fi
		fi
	fi
	if [ ! `arch` = "x86_64" ]; then
		DISCORDRPC=0
	fi
	if [ "$TARGET_WEB" = 1 ]; then 
		EXTERNAL_DATA=0
		DISCORDRPC=0
	fi
	}

doconfig(){
	if(whiptail --title "Build Options" --yesno "$(cat ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinuxcfg.txt)" 28 75 --yes-button "Edit Options" --no-button "Proceed" --defaultno); then
		whiptail --title "READ THIS NOW - IT WILL NOT REAPPEAR AUTOMATICALLY" --msgbox "The config file will open in your default xdg editor.\n\nWhen you exit your editor, installation will continue.\n\nFor most people, default options which include community enhancements are reccommended.\n\nIf you mess up the config file, delete\n${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinuxcfg.txt \nand it will be recreated." 16 60
		xdg-open ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinuxcfg.txt 
	fi
	}

loademsdk(){
	if [ ! -d ~/emsdk ]; then
		cd
		git clone https://github.com/emscripten-core/emsdk.git
		cd emsdk
		./emsdk install latest
		./emsdk activate latest
	fi
	source ~/emsdk/emsdk_env.sh
	}

prepnx(){
	mkdir ~/"$REPO"/build
	mkdir ~/"$REPO"/build/"$VERSION"_pc
	mkdir ~/"$REPO"/build/"$VERSION"_pc/romfs
	ln -s ${XDG_DATA_HOME:-$HOME/.local/share}/"$REPO"/sm64.sav ~/"$REPO"/build/"$VERSION"_pc/sm64.sav 
	ln -s ${XDG_DATA_HOME:-$HOME/.local/share}/"$REPO"/sm64.log ~/"$REPO"/build/"$VERSION"_pc/sm64.log 
	ln -s ${XDG_DATA_HOME:-$HOME/.local/share}/"$REPO"/conf.bin ~/"$REPO"/build/"$VERSION"_pc/conf.bin 
	ln -s ~/"$REPO"/baserom."$VERSION".z64 ~/"$REPO"/build/"$VERSION"_pc/baserom."$VERSION".z64
	cd ~/"$REPO"/tools
	make "$JOBS"
	cd ~/"$REPO"/import
	echo Extracting Assets from ROM...
	python3 extract_assets.py
	python3 ../scripts/pak.py --source . --output ~/"$REPO"/build/"$VERSION"_pc/romfs/'!!base.pak'
	}

dohd(){ 
	if [ "$REPO" = "sm64nx" ]; then 
		if [ ! -d ~/"$REPO"/build ] ; then mkdir ~/"$REPO"/build
		fi
		if [ ! -d ~/"$REPO"/build/"$VERSION"_pc ] ; then mkdir ~/"$REPO"/build/"$VERSION"_pc
		fi
		if [ ! -d ~/"$REPO"/build/"$VERSION"_pc/romfs ] ; then mkdir ~/"$REPO"/build/"$VERSION"_pc/romfs
		fi
		mkdir ~/"$REPO"/build/"$VERSION"_pc/romfs/"Cleaner Aesthetics"
		cd ~/"$REPO"/build/"$VERSION"_pc/romfs/"Cleaner Aesthetics"
		wget https://cdn.discordapp.com/attachments/730416836780490752/730430152957362191/cleaner.pak
		mkdir ~/"$REPO"/build/"$VERSION"_pc/romfs/"HD Mario . Bowser"
		cd ~/"$REPO"/build/"$VERSION"_pc/romfs/"HD Mario . Bowser"
		wget https://cdn.discordapp.com/attachments/730416836780490752/730425308989227158/arredondo.pak
		mkdir ~/"$REPO"/build/"$VERSION"_pc/romfs/"~SGI Models"
		cd ~/"$REPO"/build/"$VERSION"_pc/romfs/"~SGI Models"
		wget https://cdn.discordapp.com/attachments/730416836780490752/730645970693652591/sgi1.2.pak
		mkdir ~/"$REPO"/build/"$VERSION"_pc/romfs/"~OWO Mod"
		cd ~/"$REPO"/build/"$VERSION"_pc/romfs/"~OWO Mod"
		wget https://cdn.discordapp.com/attachments/730416836780490752/730420038024036362/owo.pak
		mkdir ~/"$REPO"/build/"$VERSION"_pc/romfs/"~HD Luigi"
		cd ~/"$REPO"/build/"$VERSION"_pc/romfs/"~HD Luigi"
		wget https://cdn.discordapp.com/attachments/730416836780490752/730425786452017222/luigi.pak
		mkdir ~/"$REPO"/build/"$VERSION"_pc/romfs/"~NES Retro"
		cd ~/"$REPO"/build/"$VERSION"_pc/romfs/"~NES Retro"
		wget https://cdn.discordapp.com/attachments/730416836780490752/730431589749620736/nes.pak
	else
		if [ "$REPO" = "sm64pc" ] || [ "$REPO" = "sm64ex" ]; then
			if [ ! -d ~/"$REPO"/build ] ; then mkdir ~/"$REPO"/build
			fi
			mkdir ~/"$REPO"/build/"$VERSION"_pc
			git clone --single-branch https://github.com/CrashCrod/Cleaner-Aesthetics.git ~/"$REPO"/build/"$VERSION"_pc/res
			cd ~/"$REPO"/build/"$VERSION"_pc/res	
			wget https://github.com/MapAnon/sm64-pc-hq-sounds/releases/download/5.1/hq_sounds_v5.1.zip
			wget https://cdn.discordapp.com/attachments/711253314855108629/712146686834638890/sm64.png
			mv sm64.png ${XDG_DATA_HOME:-$HOME/.local/share}/icons/"$REPO".png
		fi
		cd ~/"$REPO"/enhancements
		if [ ! -f ~/"$REPO"/enhancements/hw_bowser.rar ]; then
			wget https://cdn.discordapp.com/attachments/716459185230970880/719758031990030427/Old_School_HD_Mario_Model.zip 
			wget https://cdn.discordapp.com/attachments/716459185230970880/718990046442684456/hd_bowser.rar	
			if [ "$REPO" = "sm64pc" ]; then
				wget https://cdn.discordapp.com/attachments/716459185230970880/718674249631662120/3d_coin_v2.patch
			elif [ "$REPO" = "sm64ex" ] || [ "$REPO" = "sm64-port" ]; then	
				wget https://cdn.discordapp.com/attachments/721806706547490868/725041183700680807/3d_coin_v2_nightly.patch
			fi
			cd ..	
			cp -Rn actors actors.bak
			unzip -o enhancements/Old_School_HD_Mario_Model 
			unrar x -o+ enhancements/hd_bowser
 			if [ "$REPO" = "sm64pc" ]; then
				git apply enhancements/3d_coin_v2.patch --ignore-whitespace
			elif [ "$REPO" = "sm64ex" ] || [ "$REPO" = "sm64-port" ]; then
				git apply enhancements/3d_coin_v2_nightly.patch --ignore-whitespace
		fi	fi
		if [ -f ~/"$REPO"/enhancements/60fps_ex.patch ] && [ `arch` = "x86_64" ]; then
			git apply enhancements/60fps_ex.patch
			sed -i 's/vsync false/vsync true/g' ${XDG_DATA_HOME:-$HOME/.local/share}/"$REPO"/sm64config.txt
		elif [ -f ~/"$REPO"/enhancements/60fps.patch ] && [ `arch` = "x86_64" ]; then
			git apply enhancements/60fps.patch
			sed -i 's/vsync false/vsync true/g' ${XDG_DATA_HOME:-$HOME/.local/share}/"$REPO"/sm64config.txt
		fi
	fi
	}

scriptUpdate(){
if [ ! -f ~/.smlinuxUpdate ]; then 
	if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
		echo Installing Script... 		
		if [ -d ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc ]; then
			if [ -d ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc.baq ]; then
				rm -rf ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc.baq
			fi
			mv -f ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc.baq
		fi
		git clone --single-branch https://github.com/enigma9o7/smlinux.git ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc
		if [ -d ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc.baq ]; then
			cp -Rn ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc.baq/* ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/
			rm -rf ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc.baq
		fi
		touch ~/.smlinuxUpdate
		mv ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinux "${MAPFILE[0]}"/
		if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
			echo WARNING: Could not write to first path directory.  Creating ~/bin.
			touch ~/.smlinuxNopath
			mkdir ~/bin
			export PATH=~/bin:$PATH
			mapfile -t -d: <<<"$PATH"
			mv -f ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinux "${MAPFILE[0]}"/
			if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
				echo ERROR - Could not add to path.  Run without AutoUpdate enabled.
				exit
			fi
		fi
		chmod +x "${MAPFILE[0]}"/smlinux
		cd "$LAUNCH_DIR"
		exec smlinux "$@"
	else
		cd ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc
		git fetch
		if [ "$(git diff HEAD origin/HEAD -- smlinux)" != "" ]; then
			git merge
			if [ ! -f ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinux ]; then
				echo "ERROR WTF!  Script Update Unsuccesful."
				echo "Try #help-desk if script udpates continue to fail"
			else
			echo 'mapfile -t -d: <<<"$PATH"
			mv -f ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinux "${MAPFILE[0]}"/
			if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
				echo WARNING: Could not write to first path directory.  Creating ~/bin.
				touch ~/.smlinuxNopath
				mkdir ~/bin
				export PATH=~/bin:$PATH
				mapfile -t -d: <<<"$PATH"
				mv -f ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinux "${MAPFILE[0]}"/
				if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
					echo ERROR - Could not add to path.  Run without AutoUpdate enabled.
				exit
				fi
			fi
			chmod +x "${MAPFILE[0]}"/smlinux
			if [ -f ~/Downloads/smlinux ]; then mv -f ~/Downloads/smlinux ~/Downloads/smlinux.old.backup
			fi
			if [ -f ~/Downloads/smlinux.sh ]; then mv -f ~/Downloads/smlinux.sh ~/Downloads/smlinux.old.backup
			fi	
			exec smlinux "$@"' > ~/.smlinuxUpdate
			chmod +x ~/.smlinuxUpdate
			cd "$LAUNCH_DIR"
			exec ~/.smlinuxUpdate "$@"
			fi
		else    echo Already up to date.
		fi
	fi
fi
}

makedesktop(){
if [ ! -f ${XDG_DATA_HOME:-$HOME/.local/share}/icons/"$REPO".* ]; then
	echo WARNING: Icon for desktop shortcut not found!
	cp ~/"$REPO"/textures/segment2/segment2.05A00.rgba16.png ${XDG_DATA_HOME:-$HOME/.local/share}/icons/"$REPO".png
	if [ "$REPO" = "sm64-port" ] || [ "$REPO" = "sm64nx" ]; then 
		wget https://cdn.discordapp.com/attachments/711253314855108629/719215654837682226/Super_Mario_64.png
		mv Super_Mario_64.png ${XDG_DATA_HOME:-$HOME/.local/share}/icons/"$REPO".png
	else
		echo 16x16 image from ROM used.  Reccommend replacing ${XDG_DATA_HOME:-$HOME/.local/share}/icons/"$REPO".png
	fi	
fi
if [ ! -f ${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop ]; then
	echo Creating Menu Entry and Desktop Shortcut...
	echo '[Desktop Entry]
Encoding=UTF-8
Type=Application
StartupNotify=false
Categories=Game;'>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
echo Icon=${XDG_DATA_HOME:-$HOME/.local/share}/icons/"$REPO".png >>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
echo Name=Super Mario 64 \("$REPO"\) >>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
	if [ "$REPO" = "sm64pc" ] || [ "$REPO" = "sm64ex" ]; then
		echo Path=~/"$REPO"/build/"$VERSION"_pc >>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
		echo Exec=~/"$REPO"/build/"$VERSION"_pc/sm64."$VERSION".f3dex2e --cheats>>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
	elif [ "$REPO" = "sm64-port" ]; then
		echo Path=${XDG_DATA_HOME:-$HOME/.local/share}/"$REPO" >>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
		printf "Exec=sh -c \"" >>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
		echo ~/"$REPO"/build/"$VERSION"_pc/sm64."$VERSION".f3dex2e';echo'\" >>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
	else
		echo Path=~/"$REPO"/build/"$VERSION"_pc >>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
		echo Exec=~/"$REPO"/build/"$VERSION"_pc/sm64."$VERSION".f3dex2e>>${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop
	fi
cp ${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop ${XDG_DESKTOP_DIR:-$HOME/Desktop}
fi
}

rungame(){
	if [ "$TARGET_WEB"  = 1 ]; then 
		cd ~/"$REPO"/build/"$VERSION"_web
		ln -s sm64.us.f3dex2e.html index.html
		python3 -m http.server 8100 &
		if [ -f /usr/bin/firefox ]; then
			firefox --new-window http://localhost:8100&disown
		else
			xdg-open http://localhost:8100&disown
		fi
	else
		gtk-launch "$REPO"&disown
	fi
}

####################################### The Beginning ########################################

#Make sure folders and installer config file exist, if not create them.

LAUNCH_DIR=$(pwd)
mapfile -t -d: <<<"$PATH"
if [ ! -d $HOME/.local ]; then mkdir $HOME/.local
fi
if [ ! -d ${XDG_DATA_HOME:-$HOME/.local/share} ]; then mkdir ${XDG_DATA_HOME:-$HOME/.local/share}
fi
if [ ! -d ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc ]; then mkdir ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc
fi
if [ ! -d ${XDG_DATA_HOME:-$HOME/.local/share}/icons ]; then mkdir ${XDG_DATA_HOME:-$HOME/.local/share}/icons
fi
if [ ! -d ${XDG_DATA_HOME:-$HOME/.local/share}/applications ]; then mkdir ${XDG_DATA_HOME:-$HOME/.local/share}/applications
fi
if [ ! -f ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinuxcfg.txt ]; then
	echo Creating ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/smlinuxcfg.txt
	makeconfig
	doconfig
elif [ "$2" = "config" ] || [ "$2" = "--config" ] || [ "$3" = "--config" ] || [ "$3" = "config" ]; then
	if [ ! -f ~/.smlinuxUpdate ]; then 
		doconfig
	fi
fi
loadconfig

#Script really begins here

if [ -f /usr/bin/mplayer ] && [ -f ~/"$REPO"/sound/samples/sfx_mario_peach/0D.aiff ] && [ ! -f ~/.smlinuxUpdate ]; then
	sh -c 'mplayer -nolirc -really-quiet ~/'"$REPO"'/sound/samples/sfx_mario_peach/0D.aiff&'
fi
if [ ! -d ${XDG_DATA_HOME:-$HOME/.local/share}/"$REPO" ]; then 
	mkdir ${XDG_DATA_HOME:-$HOME/.local/share}/"$REPO"
fi

if [ "$1" = "-u" ] || [ "$1" = "--update" ] || [ "$1" = "update" ] || ( [ "$TARGET_WEB" = 1 ] && [ -d ~/"$REPO" ] && [ ! -d ~/"$REPO"/build/"$VERSION"_web ]); then
	if [ -f ~/.smlinuxUpdate ]; then 
		rm ~/.smlinuxUpdate
		echo Script Update Complete.	
	elif [ "$AutoUpdate" = 1 ]; then
		echo Checking for Script Updates on Github...
		scriptUpdate "$@"
	else
		echo "WARNING: AutoUpdate Disabled in Config File!"
	fi
	if [ ! -d ~/"$REPO" ]; then
		echo ERROR: No ~/"$REPO" folder to update!  Specify romfile name for fresh build.
		exit
	fi
	cd ~/"$REPO"
	echo Checking for "$REPO" repo updates on Github...
	git checkout "$Branch"
	git fetch
	if [ "$(git diff HEAD origin/HEAD)" != "" ]; then git merge
	fi
	if [ "$?" = "1" ]; then
		if [ -f ~/"$REPO"/enhancements/3d_coin_v2_nightly.patch ]; then
			git apply -R enhancements/3d_coin_v2_nightly.patch
			if [ -f ~/"$REPO"/enhancements/60fps_ex.patch ]; then
				git apply -R enhancements/60fps_ex.patch
			elif [ -f ~/"$REPO"/enhancements/60fps.patch ]; then
				git apply -R enhancements/60fps.patch
			fi
		fi
		git merge
		if [ "$?" = "1" ]; then
			echo WARNING: Unable to merge source updates from github.
		elif [ -f ~/"$REPO"/enhancements/3d_coin_v2_nightly.patch ]; then
			git apply enhancements/3d_coin_v2_nightly.patch
			if [ -f ~/"$REPO"/enhancements/60fps_ex.patch ]; then
				git apply enhancements/60fps_ex.patch
			elif [ -f ~/"$REPO"/enhancements/60fps.patch ]; then
				git apply enhancements/60fps.patch
			fi
		fi
	fi	

	if [ -d ~/"$REPO"/build/"$VERSION"_pc ] && [ "$TARGET_WEB" = "0" ]; then
		if [ -d ~/"$REPO"/build/"$VERSION"_pc.old ]; then
			rm -rf ~/"$REPO"/build/"$VERSION"_pc.old
		fi
		mv ~/"$REPO"/build/"$VERSION"_pc ~/"$REPO"/build/"$VERSION"_pc.old
	elif [ -d ~/"$REPO"/build/"$VERSION"_web ] && [ "$TARGET_WEB" = "1" ]; then
		if [ -d ~/"$REPO"/build/"$VERSION"_web.old ]; then
			rm -rf ~/"$REPO"/build/"$VERSION"_web.old
		fi
		mv ~/"$REPO"/build/"$VERSION"_web ~/"$REPO"/build/"$VERSION"_web.old
	fi
	
	if [ "$2" = "--hd" ] || [ "$2" = "--HD" ] || [ "$3" = "--hd" ] || [ "$3" = "--HD" ] || [ "$UpdateHD" = 1 ]; then
		echo Adding Community Enhancements...
		dohd
	fi	
	echo Compiling...
	if [ -f /usr/bin/mplayer ]; then
		sh -c 'mplayer -nolirc -really-quiet ~/'"$REPO"'/sound/samples/sfx_mario/0C.aiff&'
	fi
	domake
	if [ ! -f ~/"$REPO"/build/"$VERSION"_pc/sm64."$VERSION".f3dex2e ] && [ "$TARGET_WEB" = "0" ]; then
		echo
		echo ERROR: You do not have the expected binary ~/"$REPO"/build/"$VERSION"_pc/sm64."$VERSION".f3dex2e
		if [ -d ~/"$REPO"/build/"$VERSION"_pc.old ]; then
			echo Restoring previous build...
			if [ -d ~/"$REPO"/build/"$VERSION"_pc ]; then 
				rm -rf ~/"$REPO"/build/"$VERSION"_pc 
			fi
			mv ~/"$REPO"/build/"$VERSION"_pc.old ~/"$REPO"/build/"$VERSION"_pc
		fi
		echo "Script Exiting incomplete.  Contact #help-desk for support."
		xdg-open https://discord.gg/B7x4svT &disown
		exit
	elif [ ! -f ~/"$REPO"/build/"$VERSION"_web/sm64."$VERSION".f3dex2e.html ] && [ "$TARGET_WEB" = "1" ]; then
		echo
		echo ERROR: You do not have the expected html ~/"$REPO"/build/"$VERSION"_web/sm64."$VERSION".f3dex2e.html
		if [ -d ~/"$REPO"/build/"$VERSION"_web.old ]; then
			echo Restoring previous build...
			if [ -d ~/"$REPO"/build/"$VERSION"_web ]; then 
				rm -rf ~/"$REPO"/build/"$VERSION"_web 
			fi
			mv ~/"$REPO"/build/"$VERSION"_web.old ~/"$REPO"/build/"$VERSION"_web
		fi
		echo "Script Exiting incomplete.  Contact #help-desk for support."
		xdg-open https://discord.gg/B7x4svT &disown
		exit
	fi
	if [ -d ~/"$REPO"/build/"$VERSION"_pc.old/res ] && [ "$TARGET_WEB" = "0" ]; then
		echo Restoring External Resources...
		cp -rpn ~/"$REPO"/build/"$VERSION"_pc.old/res/. ~/"$REPO"/build/"$VERSION"_pc/res
	fi
	if [ -d ~/"$REPO"/build/"$VERSION"_pc/res/.git ] ; then
		echo Checking for Cleaner Aesthetics Texture updates on Github...
		cd ~/"$REPO"/build/"$VERSION"_pc/res
		git pull
	fi
	if [ -d ~/"$REPO"/build/"$VERSION"_pc.old/romfs ]; then
		echo "Restoring Savefile, ROM and ROM Filesystem (paks)"
		cp ~/"$REPO"/build/"$VERSION"_pc.old/baserom."$VERSION".z64 ~/"$REPO"/build/"$VERSION"_pc/
		cp -rpn ~/"$REPO"/build/"$VERSION"_pc.old/romfs/. ~/"$REPO"/build/"$VERSION"_pc/romfs
		cp ~/"$REPO"/build/"$VERSION"_pc.old/sm64.sav ~/"$REPO"/build/"$VERSION"_pc/
		cp ~/"$REPO"/build/"$VERSION"_pc.old/conf.bin ~/"$REPO"/build/"$VERSION"_pc/
	elif [ "$REPO" = "sm64nx" ]; then
		prepnx
		if [ "$InstallHD" = 1 ]; then
			dohd
		fi		
	fi
	echo Update Complete.  Testing Application...
	if [ ! -f ${XDG_DATA_HOME:-$HOME/.local/share}/applications/"$REPO".desktop ]; then
		makedesktop
	fi
	rungame
	sleep 10
	echo
	echo Script Done.  You may exit or close this terminal window.
	if [ "$TARGET_WEB" = 1 ]; then
		echo Python Webserver will remain running until it is closed.
	fi
	echo
	exit
fi

if [ "$1" = "--purge" ] || [ "$1" = "purge" ]; then
	
	echo Note this does not remove any packages installed as build tools or dependencies.
	echo Remove those with your package manager.  Devel libraries can always safely be removed.
	echo This also does not remove or restore any prior sm64pc folders backed up if you 
	echo installed more that once.  Just delete those folders manually from any file manager.
	echo And of course you must delete this script itself from "${MAPFILE[0]}"
	rm -rf ~/sm64pc
	rm -rf ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc
	rm ${XDG_DATA_HOME:-$HOME/.local/share}/icons/sm64pc.*
	rm ${XDG_DATA_HOME:-$HOME/.local/share}/applications/sm64pc.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/sm64pc.desktop
	rm ${XDG_DATA_HOME:-$HOME/.local/share}/icons/sm64.*
	rm ${XDG_DATA_HOME:-$HOME/.local/share}/applications/sm64.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/sm64.desktop
	rm -rf ~/sm64-port
	rm -rf ${XDG_DATA_HOME:-$HOME/.local/share}/sm64-port
	rm ${XDG_DATA_HOME:-$HOME/.local/share}/icons/sm64-port.*
	rm ${XDG_DATA_HOME:-$HOME/.local/share}/applications/sm64-port.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/sm64-port.desktop
	rm -rf ~/sm64nx
	rm -rf ${XDG_DATA_HOME:-$HOME/.local/share}/sm64nx
	rm ${XDG_DATA_HOME:-$HOME/.local/share}/icons/sm64nx.*
	rm ${XDG_DATA_HOME:-$HOME/.local/share}/applications/sm64nx.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/sm64nx.desktop
        exit
fi

if [ -f "$1" ]||[ -f "$LAUNCH_DIR"/"$1" ]; then
	echo
	if [ -f ~/.smlinuxUpdate ]; then 
		rm ~/.smlinuxUpdate
		echo Script Update Complete.
	else	if [ ! -d ${XDG_DATA_HOME:-$HOME/.local/share}/sm64pc/.git ]; then
			echo [1] Installing required build tools...
			$Linux			
		else
			echo [1] This is not first install, skipping dependencies...
		fi
		if [ "$REPO" = "sm64nx" ]; then
			gcccheck
		fi
		echo
		echo [2] Checking for Script Updates from Github...
		if [ "$AutoUpdate" = 1 ]; 
			then scriptUpdate "$@"
		else
			echo "Warning: AutoUpdate Disabled in Config File!"
		fi
	fi
else
	echo "/-----------------------------------------------------------------------------\\"
	echo "|                                                                             |"
	echo "|      Super Mario 64 Install * Build * Update Script for Linux               |"
	echo "|                                                                             |"
	echo "| First Install: smlinux <romfile> <options>                                  |"
	echo "|  Examples:                                                                  |"
	echo "|         smlinux ~/roms/n64/sm64.z64                                         |"
	echo "|                         or                                                  |"
	echo "|         smlinux \"Super Mario 64 (U) [!].z64\"                                |"
	echo "|                                                                             |"
	echo "| Update: smlinux update <options>                                            |" 
	echo "|  Updates existing install from github, preserving external textures.        |"
	echo "|                                                                             |"
	echo "| Purge:  smlinux purge                                                       |"                 
	echo "|  Removes all traces of installation previously created by this script.      |"
	echo "|                                                                             |"
	echo "| options: --hd also update community sourced upscale add-ons                 |"
	echo "|          --config show config file before build (default on first install). |"
	echo "|                                                                             |"
	echo "-------------------------------------------------------------------------------"
	echo	
	if [ -d "$REPO" ]; then
		echo "ERROR: You must specify update or purge"
	else echo "ERROR: No romfile specified."	
	fi
	echo
	exit
fi

echo
echo [3] Downloading "$REPO" source from github... 
if [ -d ~/"$REPO" ] ; then
	TIMESTAMP=(date -r ~/"$REPO" +"%Y%m%d_%H%M%S")
	mv ~/"$REPO" ~/"$REPO"-"$TIMESTAMP"
	echo Existing "$REPO" directory renamed.  
else 	NOOLD=1
fi
cd
if [ "$REPO" = "sm64nx" ]; then
	git clone https://github.com/teamsalta/"$REPO".git -b "$Branch"
elif [ "$REPO" = "sm64ex" ]; then
	git clone https://github.com/sm64pc/"$REPO".git -b "$Branch"
else
	git clone https://github.com/"$REPO"/"$REPO".git -b "$Branch"
fi

if [ ! -d ~/"$REPO" ]; then
	echo "ERROR: Could not reach github.  "
	echo "Script Ending Incomplete.  Contact #help-desk for support."
	xdg-open https://discord.gg/B7x4svT &disown
	exit
fi

cd "$LAUNCH_DIR"
if [ -f "$1" ]; then
	cp "$1" ~/"$REPO"/baserom."$VERSION".z64 
else
	cp ~/"$REPO"-"$TIMESTAMP"/baserom."$VERSION".z64 ~/"$REPO" 
fi

if [ "$REPO" = "sm64nx" ] && [ "$NOOLD" = "1" ]; then
	if [ -f /usr/bin/mplayer ] && [ -f ~/sm64ex/sound/samples/sfx_mario_peach/0D.aiff ]; then
		sh -c 'mplayer -nolirc -really-quiet ~/sm64ex/sound/samples/sfx_mario_peach/13.aiff&'
	fi
	echo		
	echo sm64nx requires additional build tools, including GCC 8+, zstd dev libraries and some Python tools.  
	echo Sudo password is required to proceed.
	sudo apt install -y libzstd-dev			# will error outside debian base
	pip3 install pillow zstandard tqdm xxhash
	gcccheck
	prepnx
elif [ "$REPO" = "sm64nx" ]; then
	prepnx
else 	cd ~/"$REPO"
	echo Extracting Assets from ROM...
	./extract_assets.py "$VERSION"
fi

echo
echo [4] Applying Community Enhancements...
echo
if [ "$InstallHD" = 1 ]; then 
	dohd
else
	echo "WARNING: InstallHD Disabled in Config File."
fi

echo
echo [5] Compiling...
domake
if [ ! -f ~/"$REPO"/build/"$VERSION"_pc/sm64."$VERSION".f3dex2e ]; then
	echo ERROR: You do not have the expected binary ~/"$REPO"/build/"$VERSION"_pc/sm64."$VERSION".f3dex2e
	echo "Script Exiting incomplete.  Contact #help-desk for support."
	xdg-open https://discord.gg/B7x4svT &disown
	exit
fi

echo [6] Echo Creating Desktop Shortcut and Menu Entry
makedesktop

echo [7] Build Succesful!  Testing Application Launch Via Shortcut...
rungame
if [ -f ~/.smlinuxNopath ]; then
	rm ~/.smlinuxNopath
	zenity --info --text='You did not have a home folder in your path so ~/bin was created.\n\nReboot or type \n\n    PATH=~/bin:$PATH\n\nbefore running smlinux again.' --title="Your installation is complete." --width=450	
	printf '\nYou did not have a home folder in your path so ~/bin was created.\n\nReboot or type \n\n      PATH=~/bin:$PATH\n\nbefore running smlinux again.\n\n'
else	
	sleep 10
fi
echo
echo Script Done.  You may exit or close this terminal window.
if [ "$TARGET_WEB" = 1 ]; then
	echo Python Webserver will remain running until it is closed.
fi
echo